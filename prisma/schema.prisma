// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Vehicle {
  id                 String              @id @default(uuid())
  slug               String
  name               String
  userId             String
  dvlaData           DvlaData?           @relation("VehicleToDvlaData")
  dashboardConfigure DashboardConfigure? @relation("VehicleToDashboardConfigure")
  images             DashboardImages[]   @relation("VehicleToDashboardImages")
  insurance          Insurance?          @relation("VehicleToInsurance")
  modifications      Modification[]      @relation("VehicleToModification")
  modificationTypes  ModificationType[]  @relation("VehicleToModificationType")
  serviceHistory     ServiceHistory[]    @relation("VehicleToServiceHistory")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([userId])
}

model DvlaData {
  id                 String   @id @default(uuid())
  vehicleId          String   @unique
  vehicle            Vehicle  @relation("VehicleToDvlaData", fields: [vehicleId], references: [id], onDelete: Cascade)
  registrationNumber String
  taxStatus          String
  taxDueDate         String?
  motStatus          String
  motExpiryDate      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([vehicleId])
}

model DashboardConfigure {
  id                 String   @id @default(uuid())
  vehicleId          String   @unique
  vehicle            Vehicle  @relation("VehicleToDashboardConfigure", fields: [vehicleId], references: [id], onDelete: Cascade)
  taxAndMot          Boolean  @default(true)
  insurance          Boolean  @default(true)
  totalModifications Boolean  @default(true)
  mileage            Boolean  @default(true)
  servicing          Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([vehicleId])
}

model DashboardImages {
  id        String   @id @default(uuid())
  vehicleId String
  vehicle   Vehicle  @relation("VehicleToDashboardImages", fields: [vehicleId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vehicleId])
}

model Insurance {
  id        String   @id @default(uuid())
  vehicleId String   @unique
  vehicle   Vehicle  @relation("VehicleToInsurance", fields: [vehicleId], references: [id], onDelete: Cascade)
  isInsured Boolean
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vehicleId])
}

model Modification {
  id                 String              @id @default(uuid())
  vehicleId          String
  vehicle            Vehicle             @relation("VehicleToModification", fields: [vehicleId], references: [id], onDelete: Cascade)
  modificationTypeId String
  modificationType   ModificationType    @relation("ModificationTypeToModification", fields: [modificationTypeId], references: [id])
  name               String
  price              Decimal
  isObsolete         Boolean             @default(false)
  notes              String?
  files              ModificationFiles[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([vehicleId])
  @@index([modificationTypeId])
}

model ModificationFiles {
  id             String       @id @default(uuid())
  modificationId String
  modification   Modification @relation(fields: [modificationId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([modificationId])
}

model ModificationType {
  id            String         @id @default(uuid())
  vehicleId     String
  vehicle       Vehicle        @relation("VehicleToModificationType", fields: [vehicleId], references: [id], onDelete: Cascade)
  modifications Modification[] @relation("ModificationTypeToModification")
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([vehicleId])
}

model ServiceHistory {
  id              String    @id @default(uuid())
  vehicleId       String
  vehicle         Vehicle   @relation("VehicleToServiceHistory", fields: [vehicleId], references: [id], onDelete: Cascade)
  provider        String
  type            String
  mileage         Int
  details         String?
  cost            Decimal
  serviceDate     DateTime
  nextServiceDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([vehicleId])
}
